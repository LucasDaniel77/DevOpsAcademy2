1  git branch
    2  git branch dev1
    3  git branch dev2
    4  git branch
    5  git push origin dev1
    6  git push origin dev2
    7  git checkout dev1
    8  git branch
    9  git pull origin dev1
   10  ls
   11  git checkout -
   12  ls
   13  git merge dev1
   14  ls
   15  git checkout dev2
   16  git pull origin dev2
   17  ls
   18  git checkout -
   19  git merge dev2
   20  git branch
   21  git push origin dev1
   22  ls
   23  git push origin main
   24  git checkout dev1
   25  ls
   26  git merge main
   27  git push origin dev1
   28  ls
   29  git checkout dev2
   30  ls
   31  git merge main
   32  git push origin dev2
   33  git checkout main
   34  git checkout dev1
   35  ls
   36  echo "1.java file is updated by dev1" > 1.java
   37  git add .
   38  git commit -m "dev1 updated 1.java"
   39  ls
   40  cat 1.java
   41  git checkout dev2
   42  cat 1.java
   43  echo "1.java file is updated by dev2" > 1.java
    44  git add .
   45  git commit -m "dev2 updated the code"
   46  git checkout main
   47  git merge dev1
   48  cat 1.java
   49  git merge dev2
   50  git mergetool --tool=vimdiff
   51  ls
   52  cat 1.java.orig
   53  rm 1.java.orig
   54  ls
   55  cat 1.java
   56  git status
   57  git commit -m "Merge confilict with 1.java file is resolved"
   58  ls
   59  git checkout dev1
   60  cat 1.java
   61  git merge main
   62  cat 1.java
   63  git checkout dev2
   64  cat 1.java
   65  git merge main
   66  cat 1.java
   67  cd ..
   68  mkdir mr
   69  cd mr
   70  git init
   71  touch m1 m2 m3
   72  git add .
   73  git commit -m "m1" m1
   74  git commit -m "m2" m2
   75  git commit -m "m3" m3
   76  git log --oneline
   77  git branch feature
   78  git checkout feature
   79  touch f1
   80  git add .
   81  git commit -m "f1"
   82  git log --oneline
   83  git checkout -
   84  touch m4
   85  git add .
   86  git commit -m "m4"
87  git checkout -
   88  git merge master
   89  git log --oneline
   90  ls
   91  cd ..
   92  git rm
   93  cd rm
   94  mkdir rm
   95  cd rm
   96  git init
   97  touch m1 m2 m3
   98  git add .
   99  git commit -m "m1" m1
  100  git commit -m "m2" m2
  101  git commit -m "m3" m3
  102  git branch feature
  103  git checkout feature
  104  touch f1
  105  git add .
  106  git commit -m "f1"
  107  git checkout -
  108  touch m4
  109  git add .
  110  git commit -m "m4"
  111  git checkout -
  112  ls
  113  git rebase master
  114  ls
  115  git log --oneline

Useful resources
https://stackoverflow.com/questions/57667377/how-does-git-branch-for-4-different-environment
https://codefresh.io/blog/stop-using-branches-deploying-different-gitops-environments/
https://medium.com/@grazibonizi/understading-the-connection-between-branching-models-and-delivery-pipeline-c9cb12e30516